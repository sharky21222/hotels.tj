// src/pages/HotelDetail.js
import React, { useState, useMemo, useRef } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { hotels } from '../data/hotels';
import BookingModal from '../components/BookingModal';

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
function copyToClipboard(str) {
  navigator.clipboard.writeText(str).then(() => alert('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!'));
}

const featuresList = [
  { key: 'wifi',        label: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π Wi-Fi',       icon: 'üì∂' },
  { key: 'breakfast',   label: '–ó–∞–≤—Ç—Ä–∞–∫ –≤–∫–ª—é—á—ë–Ω',        icon: 'üç≥' },
  { key: 'parking',     label: '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞',    icon: 'üÖøÔ∏è' },
  { key: 'bar',         label: '–ë–∞—Ä',                    icon: 'üç∏' },
  { key: 'restaurant',  label: '–†–µ—Å—Ç–æ—Ä–∞–Ω',               icon: 'üçΩÔ∏è' },
  { key: 'fitness',     label: '–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä',           icon: 'üèãÔ∏è' },
  { key: 'spa',         label: '–°–ø–∞',                    icon: 'üíÜ' },
  { key: 'pool',        label: '–ë–∞—Å—Å–µ–π–Ω',                icon: 'üèä' },
];

export default function HotelDetail() {
  const { id } = useParams();
  const hotel = hotels.find(h => h.id === +id);
  const navigate = useNavigate();
  const roomsRef = useRef();

  // –ú–æ–¥–∞–ª–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const [modal, setModal] = useState({ open: false, roomType: '', total: 0 });

  const [imgIdx, setImgIdx] = useState(0);
  const today = new Date().toISOString().slice(0, 10);
  const tmr = new Date(); tmr.setDate(tmr.getDate() + 1);
  const [start, setStart] = useState(today);
  const [end, setEnd] = useState(tmr.toISOString().slice(0, 10));
  const [guests, setGuests] = useState(1);

  // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
  const nights = useMemo(() => {
    const d1 = new Date(start), d2 = new Date(end);
    const diff = (d2 - d1) / (1000 * 60 * 60 * 24);
    return diff > 0 ? diff : 1;
  }, [start, end]);

  // —Ñ—É–Ω–∫—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  async function handleBook(data) {
    try {
      alert(
        `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n` +
        `–û—Ç–µ–ª—å: ${hotel.name}\n` +
        `–¢–∏–ø –Ω–æ–º–µ—Ä–∞: ${modal.roomType}\n` +
        `–°—É–º–º–∞: ${modal.total}$\n` +
        `–î–∞—Ç—ã: ${start} ‚Äî ${end}\n` +
        `–ì–æ—Å—Ç–µ–π: ${guests}\n` +
        `–ò–º—è: ${data.name}\n` +
        `–¢–µ–ª: ${data.phone}`
      );
      setModal({ open: false, roomType: '', total: 0 });
    } catch (e) {
      alert("–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + e.message);
    }
  }

  if (!hotel) return (
    <div className="min-h-screen flex justify-center items-center bg-zinc-900 text-2xl text-white font-bold">
      –û—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    </div>
  );

  const actualFeatures = featuresList.filter(f => hotel[f.key]);

  function scrollToRooms() {
    setTimeout(() => {
      roomsRef.current?.scrollIntoView({ behavior: "smooth", block: "start" });
    }, 50);
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-zinc-900 via-zinc-800 to-zinc-950 text-white flex flex-col font-sans">

      {/* –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" */}
      <button
        onClick={() => navigate(-1)}
        className="fixed top-4 left-4 z-50 bg-yellow-400/90 hover:bg-yellow-300 hover:-translate-x-1 active:scale-90 transition-all text-black font-bold px-4 py-2 sm:px-6 sm:py-3 rounded-full shadow-2xl text-lg sm:text-xl"
      >
        <span className="inline-block text-xl sm:text-2xl">‚Üê</span>
        <span className="ml-2 sm:ml-3 font-bold text-md sm:text-lg">–ù–∞–∑–∞–¥</span>
      </button>

      <div className="flex flex-col gap-6 sm:gap-8 max-w-5xl mx-auto px-4 sm:px-6 md:px-8 py-8 sm:py-10 w-full">

        {/* –ö–Ω–æ–ø–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –∫ –Ω–æ–º–µ—Ä–∞–º */}
        <div className="flex items-center justify-between mb-2 sm:mb-4">
          <Link to="/" className="md:hidden text-yellow-400 hover:underline text-sm sm:text-base transition-colors">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</Link>
          <button
            className="ml-auto px-4 py-2 sm:px-6 sm:py-3 bg-yellow-400/90 hover:bg-yellow-500 active:scale-95 rounded-xl font-bold shadow-lg transition-all text-black text-sm sm:text-base"
            onClick={scrollToRooms}
          >
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–º–µ—Ä–∞ ‚Üì
          </button>
        </div>

        {/* –§–æ—Ç–æ-—Å–ª–∞–π–¥–µ—Ä */}
        <div className="relative rounded-2xl overflow-hidden shadow-2xl h-48 sm:h-64 md:h-80 lg:h-[420px] mb-6 sm:mb-8 flex items-end select-none">
          <img
            src={hotel.images?.[imgIdx] || hotel.images?.[0]}
            alt={hotel.name}
            className="absolute w-full h-full object-cover object-center transition-all duration-500"
            draggable={false}
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/90 via-black/20 to-transparent" />

          {hotel.images?.length > 1 && (
            <>
              <button
                onClick={() => setImgIdx(i => i === 0 ? hotel.images.length - 1 : i - 1)}
                className="absolute left-2 sm:left-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-yellow-400/80 hover:text-black text-white rounded-full w-8 sm:w-10 h-8 sm:h-10 flex items-center justify-center text-xl sm:text-2xl shadow transition-all duration-200 active:scale-90"
                aria-label="–ù–∞–∑–∞–¥"
              >‚Äπ</button>
              <button
                onClick={() => setImgIdx(i => i === hotel.images.length - 1 ? 0 : i + 1)}
                className="absolute right-2 sm:right-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-yellow-400/80 hover:text-black text-white rounded-full w-8 sm:w-10 h-8 sm:h-10 flex items-center justify-center text-xl sm:text-2xl shadow transition-all duration-200 active:scale-90"
                aria-label="–í–ø–µ—Ä—ë–¥"
              >‚Ä∫</button>
            </>
          )}

          {hotel.images?.length > 1 && (
            <div className="absolute left-4 sm:left-6 bottom-4 sm:bottom-6 flex gap-2 sm:gap-3 z-20">
              {hotel.images.map((src, idx) => (
                <button
                  key={src}
                  className={`w-12 sm:w-16 h-8 sm:h-12 rounded-lg overflow-hidden border-2 transition-all duration-300 
                    ${imgIdx === idx
                      ? 'border-yellow-400 scale-110 shadow-lg'
                      : 'border-transparent opacity-70 hover:opacity-100 hover:scale-105'}`}
                  onClick={() => setImgIdx(idx)}
                  aria-label={`–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è ${idx + 1}`}
                >
                  <img src={src} alt={`preview ${idx + 1}`} className="w-full h-full object-cover" />
                </button>
              ))}
            </div>
          )}

          {hotel.label && (
            <span className="absolute top-4 sm:top-5 left-4 sm:left-5 px-3 sm:px-5 py-1 sm:py-2 bg-pink-600/90 rounded-full font-bold text-xs sm:text-sm uppercase shadow-lg">
              {hotel.label}
            </span>
          )}
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω—Ñ–æ */}
        <section className="grid grid-cols-1 md:grid-cols-3 gap-6 sm:gap-8 mb-8">
          <div className="md:col-span-2 flex flex-col gap-4 sm:gap-6">
            <h2 className="text-xl sm:text-2xl font-extrabold text-yellow-400 mb-2">–û–ø–∏—Å–∞–Ω–∏–µ</h2>
            <p className="text-white text-base sm:text-lg leading-relaxed">{hotel.description}</p>
            <div className="mt-4 flex flex-wrap gap-2 sm:gap-4">
              {actualFeatures.map(f => (
                <span key={f.key} className="inline-flex items-center gap-1 px-3 py-1 sm:px-4 sm:py-2 bg-white/15 rounded-lg text-sm sm:text-base text-white/90 font-semibold shadow hover:bg-yellow-400/20 transition-all">
                  <span className="text-lg">{f.icon}</span>{f.label}
                </span>
              ))}
            </div>
          </div>
          <div className="rounded-2xl bg-white/10 p-4 sm:p-6 md:p-7 flex flex-col gap-2 sm:gap-4 shadow-xl min-h-[200px] sm:min-h-[230px]">
            <div className="flex items-center gap-2 text-white/90 text-sm sm:text-base"><span>üïë</span> –ó–∞—Å–µ–ª–µ–Ω–∏–µ: <b>—Å 14:00</b></div>
            <div className="flex items-center gap-2 text-white/90 text-sm sm:text-base"><span>üö™</span> –í—ã—Å–µ–ª–µ–Ω–∏–µ: <b>–¥–æ 12:00</b></div>
            <div className="flex items-center gap-2 text-white/90 text-sm sm:text-base"><span>üìç</span> –ê–¥—Ä–µ—Å: 
              <span className="truncate max-w-[140px] sm:max-w-[180px] inline-block ml-1">{hotel.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
              <button
                className="ml-1 text-yellow-400 underline underline-offset-2 text-xs sm:text-sm hover:text-yellow-300 transition"
                onClick={() => copyToClipboard(hotel.address || '')}
                type="button"
              >—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            </div>
            <div className="flex items-center gap-2 text-white/90 text-sm sm:text-base"><span>üë•</span> {hotel.reviews || 34} –æ—Ç–∑—ã–≤–æ–≤</div>
          </div>
        </section>

        {/* –î–∞—Ç—ã –∏ –≥–æ—Å—Ç–∏ */}
        <section className="rounded-2xl bg-white/5 p-4 sm:p-6 flex flex-wrap gap-3 sm:gap-6 items-center mb-4 shadow-lg">
          <h2 className="text-lg sm:text-xl font-semibold text-yellow-400 w-full mb-2">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –∏ –≥–æ—Å—Ç–µ–π</h2>
          <input
            type="date"
            value={start}
            onChange={e => setStart(e.target.value)}
            className="px-3 py-1 sm:px-4 sm:py-2 rounded-lg bg-white/15 text-white focus:outline-yellow-400 text-sm sm:text-base"
          />
          <span className="text-xl sm:text-2xl text-white">‚Üí</span>
          <input
            type="date"
            value={end}
            onChange={e => setEnd(e.target.value)}
            className="px-3 py-1 sm:px-4 sm:py-2 rounded-lg bg-white/15 text-white focus:outline-yellow-400 text-sm sm:text-base"
          />
          <select
            value={guests}
            onChange={e => setGuests(Number(e.target.value))}
            className="px-3 py-1 sm:px-4 sm:py-2 rounded-lg bg-white/15 text-white focus:outline-yellow-400 text-sm sm:text-base"
          >
            <option value={1}>1 –≤–∑—Ä–æ—Å–ª—ã–π</option>
            <option value={2}>2 –≤–∑—Ä–æ—Å–ª—ã—Ö</option>
            <option value={3}>3 –≤–∑—Ä–æ—Å–ª—ã—Ö</option>
            <option value={4}>4 –≤–∑—Ä–æ—Å–ª—ã—Ö</option>
          </select>
          <div className="w-full text-white text-sm sm:text-base mt-2">
            –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{nights}</b> –Ω–æ—á–µ–π √ó <b>{guests}</b> —á–µ–ª.
          </div>
        </section>

        {/* –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ */}
        <section ref={roomsRef}>
          <h2 className="text-xl sm:text-2xl font-extrabold text-yellow-400 mb-4">–ù–æ–º–µ—Ä–∞</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
            {['–°–∏–Ω–≥–ª', '–î–∞–±–ª'].map((type, i) => {
              const price = type === '–°–∏–Ω–≥–ª' ? 50 : 80;
              const total = price * nights * guests;
              return (
                <div
                  key={type}
                  className="rounded-2xl bg-white/10 shadow-xl flex flex-col overflow-hidden group hover:-translate-y-1 hover:shadow-yellow-300/50 transition-transform duration-300"
                >
                  <img
                    src={hotel.images?.[(i + 1) % hotel.images.length] || hotel.images[0]}
                    alt={type}
                    className="w-full h-32 sm:h-40 md:h-48 object-cover object-center"
                  />
                  <div className="flex flex-col gap-2 p-4 sm:p-6 flex-1 justify-between">
                    <h3 className="text-lg sm:text-xl font-bold mb-1">{type} Room</h3>
                    <p className="text-sm sm:text-base">–¶–µ–Ω–∞: <span className="font-bold text-yellow-400">{price}$</span> / –Ω–æ—á—å</p>
                    <p className="text-sm sm:text-base">
                      –ò—Ç–æ–≥–æ –∑–∞ <b>{nights}</b> –Ω–æ—á–µ–π √ó {guests} —á–µ–ª = <span className="text-yellow-400 font-extrabold">{total}$</span>
                    </p>
                    <button
                      className="mt-2 sm:mt-3 bg-yellow-400 text-black font-semibold px-4 sm:px-6 py-2 sm:py-3 rounded-lg hover:bg-yellow-500 shadow transition-all hover:scale-105 active:scale-95 text-sm sm:text-base"
                      onClick={() => setModal({ open: true, roomType: type, total })}
                    >
                      –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ {total}$
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        </section>

        {/* –†–∞–∑–¥–µ–ª –æ—Ç–∑—ã–≤–æ–≤ */}
        {hotel.reviewsList && hotel.reviewsList.length > 0 && (
          <section className="mt-8 sm:mt-10">
            <h2 className="text-xl sm:text-2xl font-extrabold text-yellow-400 mb-4">–û—Ç–∑—ã–≤—ã –≥–æ—Å—Ç–µ–π</h2>
            <div className="flex flex-col gap-4 sm:gap-6">
              {hotel.reviewsList.map((r, idx) => (
                <div key={idx} className="bg-white/5 rounded-xl p-4 sm:p-6 flex gap-3 sm:gap-5 items-start shadow">
                  <span className="bg-yellow-400 text-black rounded-full w-8 h-8 sm:w-10 sm:h-10 flex items-center justify-center text-base sm:text-xl font-bold">
                    {r.user[0]}
                  </span>
                  <div className="flex-1">
                    <div className="flex justify-between text-sm sm:text-base">
                      <span className="font-bold">{r.user}</span>
                      <span className="text-yellow-400">‚òÖ{r.rating}</span>
                    </div>
                    <p className="mt-1 text-xs sm:text-sm text-white/80">{r.text}</p>
                  </div>
                </div>
              ))}
            </div>
          </section>
        )}

      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <BookingModal
        open={modal.open}
        onClose={() => setModal({ open: false, roomType: '', total: 0 })}
        hotel={hotel}
        roomType={modal.roomType}
        total={modal.total}
        nights={nights}
        guests={guests}
        start={start}
        end={end}
        onBook={handleBook}
      />
    </div>
  );
}
